using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace SimpleBuilder
{
    [Generator]
    public class BuilderGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // Register a syntax receiver that will be created for each generation pass
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver is not SyntaxReceiver receiver)
                return;


            context.AddSource(
                "Logs",
                SourceText.From(
                    $@"/*{Environment.NewLine + string.Join(Environment.NewLine, receiver.Log) + Environment.NewLine}*/",
                    Encoding.UTF8));

            foreach (var workItem in receiver.WorkItems)
            {
                var fileName = OnlyName(workItem.BuilderClass) + ".cs";
                var builderClassName = OnlyName(workItem.BuilderClass);
                var underBuilderClassName = OnlyName(workItem.ClassUnderBuilder.Name);
                var properties = workItem.ClassUnderBuilder.ReadWriteScalarProperties().ToList();
                var code = new CodeWriter();

                code.AppendLine("//This file was generated by simple builder");
                code.AppendLine("using System;");
                code.AppendLine();
                code.AppendLine();
                using (code.BeginScope($"namespace {workItem.ClassUnderBuilder.FullNamespace()}"))
                {
                    using (code.BeginScope($"class {builderClassName}"))
                    {
                        code.AppendLine($@"private {underBuilderClassName} _instance;");
                        code.AppendLine();
                        using (code.BeginScope($@"private {builderClassName}()"))
                        {
                            using (code.BeginScope(
                                $@"_instance = new {underBuilderClassName}()",
                                true))
                            {
                                foreach (var property in properties)
                                {
                                    code.AppendLine($@"{property.Name} = default,");
                                }
                            }
                        }

                        code.AppendLine();
                        using (code.BeginScope($@"public static {builderClassName} CreateDefault()"))
                        {
                            code.AppendLine($"return new {builderClassName}();");
                        }

                        code.AppendLine();
                        using (code.BeginScope($"public {underBuilderClassName} Build()"))
                        {
                            code.AppendLine("return _instance;");
                        }

                        foreach (var property in properties.ToList())
                        {
                            BuildProperty(code, property, builderClassName);
                        }
                    }
                }

                context.AddSource(fileName, SourceText.From(code.ToString(), Encoding.UTF8));
            }
        }

        private void BuildProperty(CodeWriter code, IPropertySymbol property, string builderClassName)
        {
            using (code.BeginScope($"public {builderClassName} With{property.Name}({property.Type} newValue)"))
            {
                code.AppendLine($"_instance.{property.Name} = newValue;");
                code.AppendLine("return this;");
            }
        }


        public static string OnlyName(string fullName)
        {
            return fullName.Substring(fullName.LastIndexOf(".", StringComparison.InvariantCultureIgnoreCase) + 1);
        }
    }
}